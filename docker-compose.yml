version: '3.8'

services:
  # Сервис базы данных PostgreSQL
  db:
    image: postgres:14.0-alpine
    container_name: lms_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Сервис Redis для Celery
  redis:
    image: redis:6.2-alpine
    container_name: lms_redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    expose:
      - "6379"

  # Основной сервис веб-приложения Django
  web:
    build: .
    container_name: lms_web
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - REDISHOST=redis
      - DB_HOST=db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Сервис Celery Worker для выполнения фоновых задач
  worker:
    build: .
    container_name: lms_worker
    command: celery -A LMS-sys worker -l info
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - REDISHOST=redis
      - DB_HOST=db
    depends_on:
      - web
      - redis

  # Сервис Celery Beat для запуска периодических задач
  beat:
    build: .
    container_name: lms_beat
    command: celery -A LMS-sys beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - REDISHOST=redis
      - DB_HOST=db
    depends_on:
      - web
      - redis

volumes:
  postgres_data:
